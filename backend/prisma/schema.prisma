datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator zod {
  provider = "npx zod-prisma-types"
}

/// Servers that polaroids has been added to
model Guild {
  guildId            String              @id @db.VarChar(255) /// The server ID, supplied by Discord API
  createdAt          DateTime            @default(now()) /// When polaroids was added to the server
  subscribedChannels SubscribedChannel[] /// Channels that polaroids watches for updates
}

/// Albums that correspond to existing folders in FileStation.
model Album {
  albumId     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  albumName   String   @unique @db.VarChar(255) /// The name of the folder on FileStation
  description String?  @db.VarChar(255) /// The album's description
  createdAt   DateTime @default(now()) /// When the file was uploaded

  files    MediaFile[] /// The files in this album
  channels SubscribedChannel[] /// The channels this album is associated with
}

/// Channels within Discord servers that polaroids watches for updates
model SubscribedChannel {
  channelId String   @id @db.VarChar(255) /// The channel ID, supplied by the Discord API
  createdAt DateTime @default(now()) /// When the file was uploaded

  guildId String /// The id of the guild this channel is associated with
  guild   Guild  @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  albumId String @db.Uuid /// The id of the album this channel is associated with
  album   Album  @relation(fields: [albumId], references: [albumId], onDelete: Cascade)
}

/// Corresponds to images/videos saved to FileStation
model MediaFile {
  discordId   String   @id @db.VarChar(255) /// The file's Discord attachment id
  uploaderId  String   @db.VarChar(255) /// The Discord user id of the person who sent this file
  extension   String   @db.VarChar(255) /// The file's extension
  fileName    String   @db.VarChar(255) /// The file's name
  description String?  @db.VarChar(255) /// A description of the photo/video
  createdAt   DateTime @default(now()) /// When the file was uploaded

  albumId String @db.Uuid /// The id of the album the photo/video is in
  album   Album  @relation(fields: [albumId], references: [albumId], onDelete: Cascade)
}

/// Session objects 
model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
